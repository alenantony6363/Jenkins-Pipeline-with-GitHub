pipeline {
    agent any

    environment {
        // Define necessary environment variables, such as email recipient
        EMAIL_RECIPIENT = 'alenantony247@gmail.com'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    // Simulate build task using Maven
                    echo 'Building the code using Maven...'
                    // Example: sh 'mvn clean package'
                }
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    // Simulate running unit and integration tests using JUnit
                    echo 'Running unit and integration tests using JUnit...'
                    // Example: sh 'mvn test'
                }
            }
            post {
                always {
                    // Archive the log file for later access
                    archiveArtifacts artifacts: '**/target/*.log', allowEmptyArchive: true
                    
                    // Send email notification with the log attached
                    mail to: "${EMAIL_RECIPIENT}",
                         subject: "Unit & Integration Test Stage: ${currentBuild.currentResult}",
                         body: "The Unit and Integration Tests have finished with status: ${currentBuild.currentResult}. Check the Jenkins logs for more information.",
                         attachLog: true
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    // Simulate code analysis task using SonarQube
                    echo 'Running code analysis using SonarQube...'
                    // Example: sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    // Simulate security scanning using OWASP Dependency-Check
                    echo 'Performing security scan using OWASP Dependency-Check...'
                    // Example: sh 'mvn org.owasp:dependency-check-maven:check'
                }
            }
            post {
                always {
                    // Archive the log file for security scan
                    archiveArtifacts artifacts: '**/target/*.log', allowEmptyArchive: true
                    
                    // Send email notification after security scan stage with the log attached
                    mail to: "${EMAIL_RECIPIENT}",
                         subject: "Security Scan Stage: ${currentBuild.currentResult}",
                         body: "The Security Scan has finished with status: ${currentBuild.currentResult}. Check the Jenkins logs for more information.",
                         attachLog: true
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    // Simulate deploying to a staging server (e.g., AWS EC2 instance)
                    echo 'Deploying the application to the staging environment...'
                    // Example: sh 'scp target/app.jar ec2-user@staging-server:/path/to/app'
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    // Simulate running integration tests on the staging environment
                    echo 'Running integration tests on the staging environment...'
                    // Example: sh 'curl http://staging-server/api/test'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    // Simulate deploying to a production server (e.g., AWS EC2 instance)
                    echo 'Deploying the application to the production environment...'
                    // Example: sh 'scp target/app.jar ec2-user@production-server:/path/to/app'
                }
            }
        }
    }

    post {
        failure {
            // Send email notification if the pipeline fails at any point with the log attached
            mail to: "${EMAIL_RECIPIENT}",
                 subject: "Pipeline Failure: ${currentBuild.fullDisplayName}",
                 body: "The pipeline has failed. Please check the Jenkins logs for details.",
                 attachLog: true
        }

        success {
            // Send email notification if the pipeline succeeds with the log attached
            mail to: "${EMAIL_RECIPIENT}",
                 subject: "Pipeline Success: ${currentBuild.fullDisplayName}",
                 body: "The pipeline has completed successfully.",
                 attachLog: true
        }
    }
}

